version: "3"
services:
  app:
    # buidlプロパティが指定されている場合、Docker Composeは指定されたディレクトリにあるDockerfileを使ってDockerイメージのビルドを行い、
    # それをコンテナとして実行する。
    # build .は、カレントディレクトリの Dockerfile を使ってイメージをビルドすることを意味します。
    build: .
    # TTYが有効になっているため、コンテナ内でコマンドを入力したり、出力を受け取ったりすることができる。
    tty: true
    ports:
      - "3000:3000"
    volumes:
      # バインドマウントしちゃうと、互いの変更が反映されるので、node_modulesもホストとコンテナで同期しちゃう
      # せっかくコンテナ側でnpm installしたのに、ローカルのnode_modulesで上書きしてしまう
      # ここに関してはまだ直感で理解できてないな。
      - ./:/app
      # なので、名前付きボリュームをコンテナのnode_modulesにボリュームマウント(同期)する。
      # そうすることで、ホストのnode_modulesを使わず、コンテナが破棄されてもvolumeとして保持することができる。
      # イメージをビルドせずともコンテナの立ち上げでそのボリュームを使えば、イメージの再ビルドをしなくてもnode_modulesをコンテナに含められる
      # 複数マウントの挙動は謎だが、上のバインドマウントによって隠されたくないコンテナのディレクトリをvolumesに登録しておくと、コンテナ内のものが読まれるようになるそう。
      - node-volumes:/app/node_modules
volumes:
  node-volumes:
